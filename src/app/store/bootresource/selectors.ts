import { createSelector } from "@reduxjs/toolkit";

import type { BootResourceState, BootResourceStatuses } from "./types";
import {
  BootResourceAction,
  BootResourceMeta,
  BootResourceType,
} from "./types";
import { splitResourceName } from "./utils";

import type { RootState } from "@/app/store/root/types";

/**
 * Get the boot resources state object.
 * @param state - The redux state.
 * @returns Boot resource state.
 */
const bootResourceState = (state: RootState): BootResourceState =>
  state[BootResourceMeta.MODEL];

/**
 * Get the collection of statuses.
 * @param state - The redux state.
 * @returns Boot resource statuses.
 */
const statuses = (state: RootState): BootResourceStatuses =>
  state[BootResourceMeta.MODEL].statuses;

/**
 * Get the list of eventErrors.
 * @param state - The redux state.
 * @returns Boot resource errors.
 */
const eventErrors = (state: RootState): BootResourceState["eventErrors"] =>
  state[BootResourceMeta.MODEL].eventErrors;

/**
 * Get the list of downloaded/downloading boot resources.
 * @param state - The redux state.
 * @returns Downloaded/downloading boot resources.
 */
const resources = (state: RootState): BootResourceState["resources"] =>
  state[BootResourceMeta.MODEL].resources;

/**
 * Get the list of resources that were synced from an image source.
 * @param state - The redux state.
 * @returns Synced boot resources.
 */
const syncedResources = createSelector([resources], (resources) =>
  resources.filter((resource) => resource.rtype === BootResourceType.SYNCED)
);

/**
 * Get the list of resources that were generated by MAAS.
 * @param state - The redux state.
 * @returns Generated boot resources.
 */
const generatedResources = createSelector([resources], (resources) =>
  resources.filter((resource) => resource.rtype === BootResourceType.GENERATED)
);

/**
 * Get the list of resources that were uploaded by the user.
 * @param state - The redux state.
 * @returns Uploaded boot resources.
 */
const uploadedResources = createSelector([resources], (resources) =>
  resources.filter((resource) => resource.rtype === BootResourceType.UPLOADED)
);

/**
 * Get the list of synced Ubuntu boot resources.
 * @param state - The redux state.
 * @returns Synced Ubuntu boot resources.
 */
const ubuntuResources = createSelector([syncedResources], (resources) =>
  resources.filter(
    (resource) => splitResourceName(resource.name).os === "ubuntu"
  )
);

/**
 * Get the list of synced Ubuntu core boot resources.
 * @param state - The redux state.
 * @returns Synced Ubuntu core boot resources.
 */
const ubuntuCoreResources = createSelector([syncedResources], (resources) =>
  resources.filter(
    (resource) => splitResourceName(resource.name).os === "ubuntu-core"
  )
);

/**
 * Get the list of synced other boot resources.
 * @param state - The redux state.
 * @returns Synced other boot resources.
 */
const otherResources = createSelector([syncedResources], (resources) =>
  resources.filter((resource) => {
    const { os } = splitResourceName(resource.name);
    return !["ubuntu", "ubuntu-core"].includes(os);
  })
);

/**
 * Get Ubuntu boot resource metadata, i.e. the list of available Ubuntu
 * releases and architectures from the default source.
 * @param state - The redux state.
 * @returns Ubuntu boot resource metadata.
 */
const ubuntu = (state: RootState): BootResourceState["ubuntu"] =>
  state[BootResourceMeta.MODEL].ubuntu;

/**
 * Whether the delete image action is in progress.
 * @param state - The redux state.
 * @returns Whether an image is being deleted.
 */
const deletingImage = createSelector(
  [statuses],
  (statuses) => statuses.deletingImage
);

/**
 * Whether the fetch action is in progress.
 * @param state - The redux state.
 * @returns Whether a fetch action is in progress.
 */
const fetching = createSelector([statuses], (statuses) => statuses.fetching);

/**
 * Returns the latest fetch error's error message.
 * @param state - The redux state.
 * @returns Fetch error message.
 */
const fetchError = createSelector(
  [eventErrors],
  (eventErrors) =>
    eventErrors.find(
      (eventError) => eventError.event === BootResourceAction.FETCH
    )?.error || null
);

/**
 * Whether the poll event is in progress.
 * @param state - The redux state.
 * @returns Whether a poll is in progress.
 */
const polling = createSelector([statuses], (statuses) => statuses.polling);

/**
 * Whether the save other images action is in progress.
 * @param state - The redux state.
 * @returns Whether other images are being saved.
 */
const savingOther = createSelector(
  [statuses],
  (statuses) => statuses.savingOther
);

/**
 * Whether the save ubuntu images action is in progress.
 * @param state - The redux state.
 * @returns Whether ubuntu images are being saved.
 */
const savingUbuntu = createSelector(
  [statuses],
  (statuses) => statuses.savingUbuntu
);

/**
 * Whether the save ubuntu core action is in progress.
 * @param state - The redux state.
 * @returns Whether ubuntu core images are being saved.
 */
const savingUbuntuCore = createSelector(
  [statuses],
  (statuses) => statuses.savingUbuntuCore
);

/**
 * Whether the stop import action is in progress.
 * @param state - The redux state.
 * @returns Whether imports are being stopped.
 */
const stoppingImport = createSelector(
  [statuses],
  (statuses) => statuses.stoppingImport
);

/**
 * Whether the rack import is running.
 * @param state - The redux state.
 * @returns Whether the rack import is running.
 */
const rackImportRunning = createSelector(
  [bootResourceState],
  (bootResource) => bootResource.rackImportRunning
);

/**
 * Whether the region import is running.
 * @param state - The redux state.
 * @returns Whether the region import is running.
 */
const regionImportRunning = createSelector(
  [bootResourceState],
  (bootResource) => bootResource.regionImportRunning
);

/**
 * Get the list of other images.
 * @param state - The redux state.
 * @returns List of other images.
 */
const otherImages = createSelector(
  [bootResourceState],
  (bootResource) => bootResource.otherImages
);

/**
 * Get the list of Ubuntu core images.
 * @param state - The redux state.
 * @returns List of Ubuntu core images.
 */
const ubuntuCoreImages = createSelector(
  [bootResourceState],
  (bootResource) => bootResource.ubuntuCoreImages
);

/**
 * Get the list of fetched images.
 * @param state - The redux state.
 * @returns List of fetched images.
 */
const fetchedImages = createSelector(
  [bootResourceState],
  (bootResource) => bootResource.fetchedImages
);

const selectors = {
  deletingImage,
  eventErrors,
  fetchedImages,
  fetchError,
  fetching,
  generatedResources,
  otherImages,
  otherResources,
  polling,
  rackImportRunning,
  regionImportRunning,
  resources,
  savingOther,
  savingUbuntu,
  savingUbuntuCore,
  statuses,
  stoppingImport,
  syncedResources,
  ubuntu,
  ubuntuCoreImages,
  ubuntuCoreResources,
  ubuntuResources,
  uploadedResources,
};

export default selectors;
